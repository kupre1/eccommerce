generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model cartitems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int

  cart      carts    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model carts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAT DateTime @default(now()) @db.Date
  updatedAT DateTime @updatedAt @db.Date
  userId    String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     cartitems[]

  @@map("carts")
}

model products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAT   DateTime @default(now()) @db.Date
  updatedAT   DateTime @updatedAt @db.Date
  description String
  imageUrl    String
  name        String
  price       Int

  cartItems   cartitems[]

  @@map("products")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  carts         carts[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
